[{"C:\\Users\\prabd\\Desktop\\Prab\\Projects\\Node-Projects\\todo-list-react\\src\\index.js":"1","C:\\Users\\prabd\\Desktop\\Prab\\Projects\\Node-Projects\\todo-list-react\\src\\App.js":"2","C:\\Users\\prabd\\Desktop\\Prab\\Projects\\Node-Projects\\todo-list-react\\src\\Footer.js":"3","C:\\Users\\prabd\\Desktop\\Prab\\Projects\\Node-Projects\\todo-list-react\\src\\Navbar.js":"4","C:\\Users\\prabd\\Desktop\\Prab\\Projects\\Node-Projects\\todo-list-react\\src\\TodoList.js":"5","C:\\Users\\prabd\\Desktop\\Prab\\Projects\\Node-Projects\\todo-list-react\\src\\TaskList.js":"6","C:\\Users\\prabd\\Desktop\\Prab\\Projects\\Node-Projects\\todo-list-react\\src\\List.js":"7","C:\\Users\\prabd\\Desktop\\Prab\\Projects\\Node-Projects\\todo-list-react\\src\\Task.js":"8"},{"size":197,"mtime":1609626747675,"results":"9","hashOfConfig":"10"},{"size":10028,"mtime":1609730463985,"results":"11","hashOfConfig":"10"},{"size":133,"mtime":1609641142335,"results":"12","hashOfConfig":"10"},{"size":204,"mtime":1609639621716,"results":"13","hashOfConfig":"10"},{"size":244,"mtime":1609652936658,"results":"14","hashOfConfig":"10"},{"size":337,"mtime":1609673905691,"results":"15","hashOfConfig":"10"},{"size":548,"mtime":1609714174198,"results":"16","hashOfConfig":"10"},{"size":668,"mtime":1609723176265,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1e36ke",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\prabd\\Desktop\\Prab\\Projects\\Node-Projects\\todo-list-react\\src\\index.js",[],["36","37"],"C:\\Users\\prabd\\Desktop\\Prab\\Projects\\Node-Projects\\todo-list-react\\src\\App.js",["38"],"import React, { useState, useRef, useEffect } from \"react\";\nimport Navbar from \"./Navbar\";\nimport Footer from \"./Footer\";\nimport TodoList from \"./TodoList\";\nimport TaskList from \"./TaskList\";\nimport uuidv4 from \"uuid/dist/v4\";\n\nconst LOCAL_STORAGE_LIST_KEY = \"todoApp.list\";\nconst LOCAL_STORAGE_SELECTED_LIST_ID_KEY = \"todoApp.selectedListId\";\n\nfunction App() {\n  const [lists, setLists] = useState([]);\n  const [selectedListId, setSelectedListId] = useState();\n  const listNameRef = useRef();\n  const taskNameRef = useRef();\n\n  const getWidth = () =>\n    window.innerWidth ||\n    document.documentElement.clientWidth ||\n    document.body.clientWidth;\n\n  function useCurrentWidth() {\n    // save current window width in the state object\n    let [width, setWidth] = useState(getWidth());\n\n    // in this case useEffect will execute only once because\n    // it does not have any dependencies.\n    useEffect(() => {\n      // timeoutId for debounce mechanism\n      let timeoutId = null;\n      const resizeListener = () => {\n        // prevent execution of previous setTimeout\n        clearTimeout(timeoutId);\n        // change width from the state object after 150 milliseconds\n        timeoutId = setTimeout(() => setWidth(getWidth()), 150);\n      };\n      // set resize listener\n      window.addEventListener(\"resize\", resizeListener);\n\n      // clean up function\n      return () => {\n        // remove resize listener\n        window.removeEventListener(\"resize\", resizeListener);\n      };\n    }, []);\n\n    return width;\n  }\n\n  function toggleTodoDeleteBtn(useCurrentWidth) {\n    let classes = \"btn btn-danger \";\n    if (useCurrentWidth <= 1300) {\n      return (classes += \"hide\");\n    } else return classes;\n  }\n\n  function toggleTaskDeleteBtn(useCurrentWidth) {\n    let classes = \"btn btn-danger \";\n    if (useCurrentWidth <= 1300) {\n      return classes;\n    } else return (classes += \"hide\");\n  }\n\n  // loads all todo and task data upon opening app\n  useEffect(() => {\n    const storedLists = JSON.parse(\n      localStorage.getItem(LOCAL_STORAGE_LIST_KEY)\n    );\n    const storedSelectedListId = localStorage.getItem(\n      LOCAL_STORAGE_SELECTED_LIST_ID_KEY\n    );\n    if (storedLists) setLists(storedLists);\n    if (storedSelectedListId) setSelectedListId(storedSelectedListId);\n  }, []);\n\n  // saves all todo data upon setting todos or tasks\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_LIST_KEY, JSON.stringify(lists));\n    console.log(\"Updating lists\");\n  }, [lists]);\n\n  // saves all todo data upon setting todos or tasks\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_SELECTED_LIST_ID_KEY, selectedListId);\n    setSelectedListId(selectedListId);\n    console.log(\"Updating selected lists \" + selectedListId);\n  }, [selectedListId]);\n\n  function handleAddList(e) {\n    console.log(\"handle add list\");\n    const name = listNameRef.current.value;\n    if (name === \"\") return;\n    console.log(\"selected\" + selectedListId);\n    const id = uuidv4();\n    setSelectedListId(id);\n    console.log(id);\n    console.log(\"selected\" + selectedListId);\n    setLists((prevLists) => {\n      return [...prevLists, { id: id, name: name, selected: false, tasks: [] }];\n    });\n    listNameRef.current.value = null;\n    console.log(id);\n    console.log(\"selected\" + selectedListId);\n  }\n\n  function handleAddTask(e) {\n    console.log(\"handle add list\");\n    const name = taskNameRef.current.value;\n    if (name === \"\") return;\n    const selectedList = lists.find((list) => list.id === selectedListId);\n    selectedList.tasks.push({ id: uuidv4(), name: name, complete: false });\n    taskNameRef.current.value = null;\n\n    const newLists = [...lists];\n    setLists(newLists);\n  }\n\n  function closeAllLists(e) {\n    console.log(\"close all lists\");\n    lists.map((list) => {\n      return (list.selected = false);\n    });\n    lists.map((list) => {\n      console.log(list.selected);\n    });\n\n    const newLists = [...lists];\n    setLists(newLists);\n    setSelectedListId(null);\n  }\n\n  async function toggleList(id) {\n    const selectedList = lists.find((list) => list.id === id);\n    const newLists = [...lists];\n\n    selectedList.selected = !selectedList.selected;\n    const otherLists = newLists.filter((list) => list.id !== id);\n\n    otherLists.map((list) => {\n      return (list.selected = false);\n    });\n    setLists(newLists);\n    await setSelectedListId(id);\n  }\n\n  function toggleTaskWindowClass() {\n    let classes = \"task-list-container \";\n    const count = lists.filter((list) => list.selected).length;\n    if (count <= 0) return (classes += \"shift-tasks\");\n    return classes;\n  }\n\n  function toggleTodoListWindowClass() {\n    let classes = \"todo-lists-container \";\n    const count = lists.filter((list) => list.selected).length;\n    if (count <= 0) return classes;\n    return (classes += \"shift-todo-lists\");\n  }\n\n  // finds the selected list and all its tasks via id in order\n  // to toggle a task to complete or incomplete\n  function toggleTask(id) {\n    const selectedList = lists.find((list) => list.id === selectedListId);\n    const selectedTask = selectedList.tasks.find((task) => task.id === id);\n\n    selectedTask.complete = !selectedTask.complete;\n    const newLists = [...lists];\n    setLists(newLists);\n  }\n\n  function handleDeleteLists() {\n    const newLists = lists.filter((list) => !list.selected);\n    setLists(newLists);\n  }\n\n  function handleClearTasks() {\n    const selectedList = lists.find((list) => list.id === selectedListId);\n    const newTasks = selectedList.tasks.filter((task) => !task.complete);\n    selectedList.tasks = newTasks;\n    const newLists = [...lists];\n    setLists(newLists);\n  }\n\n  function renderListsCount() {\n    const count = lists.filter((list) => !list.complete).length;\n\n    if (count <= 0) return \"no active todo lists!\";\n    else if (count === 1) return `${count} active todo list`;\n    else return `${count} active todo lists`;\n  }\n\n  function renderTasksCount() {\n    if (selectedListId === null || selectedListId === undefined) return;\n    const selectedList = lists.find((list) => list.id === selectedListId);\n    if (selectedList === null || selectedList === undefined) return;\n    const count = selectedList.tasks.filter((task) => !task.complete).length;\n\n    if (count <= 0) return \"no task left to complete!\";\n    else if (count === 1) return `${count} task left to complete`;\n    else return `${count} tasks left to complete`;\n  }\n\n  function renderTodaysDate() {\n    let today = new Date();\n\n    let dd = today.getDate();\n    let mm = today.getMonth() + 1;\n    let yyyy = today.getFullYear();\n\n    let months = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n\n    if (dd < 10) {\n      dd = \"0\" + dd;\n    }\n\n    let date = `${months[mm]}. ${dd}, ${yyyy}`;\n\n    return date;\n  }\n\n  const selectedList = lists.find((list) => list.id === selectedListId);\n\n  return (\n    <div className=\"app\">\n      <Navbar />\n      <main>\n        <div className=\"date-container\">\n          <h5 className=\"date\">{renderTodaysDate()}</h5>\n        </div>\n        <div className=\"page-line\"></div>\n        <div className=\"page-line\"></div>\n        <div className=\"page-line\"></div>\n        <div className=\"page-line\"></div>\n        <div className=\"page-line\"></div>\n        <div className=\"page-line\"></div>\n        <div className=\"page-line\"></div>\n        <div className=\"page-line\"></div>\n        <div className=\"page-line\"></div>\n        <div className=\"page-line\"></div>\n        <div className=\"page-line\"></div>\n        <div className=\"page-line\"></div>\n        <div className=\"page-line\"></div>\n        <div className=\"page-line\"></div>\n        <div className=\"page-line\"></div>\n        <div className=\"page-line\"></div>\n        <div className=\"page-line\"></div>\n        <div className=\"page-line\"></div>\n        <div className=\"page-line\"></div>\n        <section className={toggleTodoListWindowClass()}>\n          <h4 className=\"lists-header\">Todo Lists</h4>\n          <input\n            className=\"input-box\"\n            ref={listNameRef}\n            type=\"text\"\n            placeholder=\"Enter a todo list...\"\n          />\n          <button\n            className=\"btn btn-success\"\n            onClick={handleAddList}\n            onSubmit={handleAddList}\n          >\n            Add\n          </button>\n          <button\n            className={toggleTodoDeleteBtn(useCurrentWidth())}\n            onClick={handleDeleteLists}\n          >\n            Delete List\n          </button>\n          <div className=\"count\">{renderListsCount()}</div>\n          <div className=\"todo-lists\">\n            <TodoList lists={lists} toggleList={toggleList} />\n          </div>\n        </section>\n\n        <section className={toggleTaskWindowClass()}>\n          <div className=\"btn-container\">\n            <button className=\"btn btn-primary\" onClick={closeAllLists}>\n              Lists\n            </button>\n            <button\n              className={toggleTaskDeleteBtn(useCurrentWidth())}\n              onClick={handleDeleteLists}\n            >\n              Delete List\n            </button>\n          </div>\n          <h4 className=\"tasks-header\">Tasks</h4>\n          <input\n            className=\"input-box\"\n            ref={taskNameRef}\n            type=\"text\"\n            placeholder=\"Enter a task...\"\n          />\n          <button\n            className=\"btn btn-success\"\n            onClick={handleAddTask}\n            onSubmit={handleAddTask}\n          >\n            Add\n          </button>\n          <button className=\"btn btn-danger\" onClick={handleClearTasks}>\n            Clear Complete\n          </button>\n          <div className=\"count\">{renderTasksCount()}</div>\n          <div className=\"task-list\">\n            <TaskList\n              tasks={selectedList ? selectedList.tasks : null}\n              toggleTask={toggleTask}\n            />\n          </div>\n        </section>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\prabd\\Desktop\\Prab\\Projects\\Node-Projects\\todo-list-react\\src\\Footer.js",[],"C:\\Users\\prabd\\Desktop\\Prab\\Projects\\Node-Projects\\todo-list-react\\src\\Navbar.js",[],"C:\\Users\\prabd\\Desktop\\Prab\\Projects\\Node-Projects\\todo-list-react\\src\\TodoList.js",[],"C:\\Users\\prabd\\Desktop\\Prab\\Projects\\Node-Projects\\todo-list-react\\src\\TaskList.js",[],"C:\\Users\\prabd\\Desktop\\Prab\\Projects\\Node-Projects\\todo-list-react\\src\\List.js",[],"C:\\Users\\prabd\\Desktop\\Prab\\Projects\\Node-Projects\\todo-list-react\\src\\Task.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":123,"column":22,"nodeType":"45","messageId":"46","endLine":123,"endColumn":24},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]